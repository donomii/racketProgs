((includes)
(types)
 (functions
  (void ansiFunctionArgs (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (display (ansiTypeMap (first tree)))
       (printf " ")
       (display (second tree))
       (if (isNil (cddr tree)) (then (printf "")) (else (printf ",")))
       (ansiFunctionArgs (cddr tree))))))

 

  (void ansiExpression (list node int indent) (declare)
   (body
    (if (isLeaf node)
      (then (display (ansiFuncMap (codeof node))))
      (else (ansiSubExpression node indent)))))
  (void
   ansiRecurList
   (list expr int indent)
   (declare)
   (body
    (if (isEmpty expr)
      (then (return))
      (else
       (ansiExpression (car expr) indent)
       (if (isNil (cdr expr))
         (then (printf ""))
         (else (printf ", ") (ansiRecurList (cdr expr) indent)))))
    ))
  (void ansiSubExpression (list tree int indent) (declare (box thing nil))
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (if (isList (first tree))
         (then (ansiSubExpression (childrenof tree) indent))
         (else
          (if (isLeaf tree)
            (then (display (ansiFuncMap  tree)))
            (else
             (if (equal 1 (listLength (childrenof tree)))
               (then
                (display (codeof (car (childrenof tree))))
                (if (equalBox
                     (boxString "return")
                     (codeof (car (childrenof tree))))
                  (then (printf ""))
                  (else (printf "()"))))
               (else
                (set thing (first   tree))
                (if (equalBox (boxSymbol "get-struct") thing)
                  (then
                   (printf
                    "%s->%s"
                    (stringify (second  tree))
                    (stringify (third  tree))))
                  (else
                   (if (equalBox (boxSymbol "new") thing)
                     (then
                      (printf
                       "malloc(sizeof(%s))"
                       (stringify  (third tree))))
                     (else
                      (printf
                       "%s("
                       (stringify
                        (ansiFuncMap (car tree))))
                      (ansiRecurList (cdr  tree) indent)
                      (printf ")")))))))))))))))
  (void ansiIf (list node int indent) (declare)
   (body
    (newLine indent)
    (printf "if ( ")
    (ansiExpression (second node) 0)
    (printf ") {")
    (ansiBody (third node) (add1 indent))
    (newLine indent)
    (printf "} else {")
    (ansiBody (fourth node) (add1 indent))
    (newLine indent)
    (printf "}")))

  (void ansiSetStruct (list node int indent) (declare)
   (body
    (newLine indent)
    (printf
     "%s->%s = "
     (stringify (first  node))
     (stringify (second  node)))
    (ansiExpression (third node) indent)))

  (void ansiGetStruct (list node int indent) (declare)
   (body
    (newLine indent)
    (printf
     "%s->%s"
     (stringify (first  node))
     (stringify (second  node)))))

  (void ansiSet (list node int indent) (declare)
   (body
    (newLine indent)
    (printf "%s = " (stringify (first  node)))
    (ansiExpression (cdr node) indent)))
	
  (void ansiReturn (list node int indent) (declare)
   (body
    (newLine indent)
	(if (equal (listLength node) 1) 
	(then (printf "return;"))
	(else 
    (printf "return ")
    (ansiExpression (cadr node) indent)
	(printf ";")
	))))

  (void ansiStatement (list node int indent) (declare)
   (body
    (if (equalBox (boxString "set") (first node))
      (then (ansiSet node indent))
      (else
       (if (equalBox (boxString "set-struct") (first node))
         (then (ansiSetStruct node indent))
         (else
          (if (equalBox (boxString "if") (first node))
            (then (ansiIf node indent))
            (else
             (if (equalBox (boxString "return") (first node))
               (then (ansiReturn node indent))
               (else
                (newLine indent)
                (ansiExpression  node indent)))))))))
    (printf ";\n")))

  (void ansiBody (list tree int indent) (declare (list code nil))
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (set code  tree)
       (if (isNil code)
       (then)
       (else
		(set code (car (codeof (car tree))))
        (printf "\nif (globalTrace)\n    snprintf(caller, 1024, \"from %s:%s\");\n"  (stringify (getTagFail code  (boxString "filename")  (boxString "Unknown"))) (stringify (getTagFail code (boxString "line") (boxString "Unknown") )))))
       (printIndent indent)
       (printf
        "%s"
        "if (globalStepTrace) printf(\"StepTrace %s:%d\\n\", __FILE__, __LINE__);\n")
       (ansiStatement (car tree) indent)
       (ansiBody (cdr tree) indent)))))

  (void ansiDeclarations (list decls int indent) (declare (box decl nil))
   (body
    (if (isEmpty decls)
      (then (return))
      (else
       (set decl (car decls))
       (printf
        "%s %s = "
        (stringify (ansiTypeMap (first decl)))
        (stringify (second decl)))
       (display (ansiFuncMap (third decl)))
       (printf ";\n")
       (ansiDeclarations (cdr decls) indent)))))

  (void ansiFunction (list node) (declare (box name nil))
   (body
    (set name  (second node))
    (printf "\n\n//Building function %s from line: %s" (stringify name) (stringify (getTag name (boxString "line"))))
    (newLine 0)
    (if (isNil node)
      (then (return))
      (else
       (newLine 0)
       (printf
        "%s %s("
        (stringify (ansiTypeMap (first node)))
        (stringify (second node)))
       (ansiFunctionArgs (third node))
       (printf ") {")
       (newLine 1)
       (ansiDeclarations (cdr (fourth node)) 1)
       (if (inList (toStr name) (noStackTrace))
       (then (printf ""))
       (else
           (printf "\nif (globalTrace)\n    printf(\"%s at %s:%s (%%s)\\n\", caller);\n" (stringify name) (stringify (getTag name (boxString "filename"))) (stringify (getTag name (boxString "line")))   )))
       (if (inList (toStr name) (noStackTrace))
         (then (printf ""))
         (else
          ;;(printf "\n  stackTracePush(\"%s\", \"%s\", %s, %d );\n" (stringify (getTag name (boxString "filename"))) (stringify name) (stringify (getTag name (boxString "line"))) 0)
          ))
       (ansiBody (fifth node) 1)
       (if (inList (toStr name) (noStackTrace))
         (then (printf ""))
         (else
            (printf "\nif (globalTrace)\n    printf(\"Leaving %s\\n\");\n" (stringify name))
            ))
       (printf "\n}\n")))))

  (void ansiForwardDeclaration (list node) (declare)
   (body
    (if (isNil node)
      (then (return))
      (else
       (printf
        "\n%s %s("
        (stringify (ansiTypeMap (first node)))
        (stringify (second node)))
       (ansiFunctionArgs (third node))
       (printf ");")))))

  (void ansiForwardDeclarations (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (ansiForwardDeclaration (car tree))
       (ansiForwardDeclarations (cdr tree))))))

  (void ansiFunctions (list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return))
      (else (ansiFunction (car tree)) (ansiFunctions (cdr tree))))))
	  
	  
  (void ansiIncludes (list nodes) (declare)
   (body
    (printf
     "%s"
     "\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nconst char* getEnv(char* key){return getenv(key);}\n void panic(char* s){abort();exit(1);}\nint sub(int a, int b) { return a - b; }\nfloat mult(int a, int b) { return a * b; }\nint greaterthan(int a, int b) { return a > b; }\nfloat subf(float a, float b) { return a - b; }\nfloat multf(float a, float b) { return a * b; }\nint greaterthanf(float a, float b) { return a > b; }\nint equal(int a, int b) { return a == b; }\nint equalString(char* a, char* b) { return !strcmp(a,b); }\nint andBool(int a, int b) { return a == b;}\nint string_length(char* s) { return strlen(s);}\nchar* setSubString(char* target, int start,char *source){target[start]=source[0]; return target;}\nchar* sub_string(char* s, int start, int length) {\nchar* substr = calloc(length+1, 1);\nstrncpy(substr, s+start, length);\nreturn substr;\n}\n\n\n\nchar* stringConcatenate(char* a, char* b) {\nint len = strlen(a) + strlen(b) + 1;\nchar* target = calloc(len,1);\nstrncat(target, a, len);\nstrncat(target, b, len);\nreturn target;\n}\n\nchar* intToString(int a) {\nint len = 100;\nchar* target = calloc(len,1);\nsnprintf(target, 99, \"%d\", a);\nreturn target;\n}\n\ntypedef int*  array;\ntypedef int bool;\n#define true 1\n#define false 0\n\n\nvoid * gc_malloc( unsigned int size ) {\nreturn malloc( size);\n}\n\nint* makeArray(int length) {\n    int * array = gc_malloc(length*sizeof(int));\n    return array;\n}\n\nint at(int* arr, int index) {\n  return arr[index];\n}\n\nvoid setAt(int* array, int index, int value) {\n    array[index] = value;\n}\n\nchar * read_file(char * filename) {\nchar * buffer = 0;\nlong length;\nFILE * f = fopen (filename, \"rb\");\n\nif (f)\n{\n  fseek (f, 0, SEEK_END);\n  length = ftell (f);\n  fseek (f, 0, SEEK_SET);\n  buffer = malloc (length);\n  if (buffer == NULL) {\n  printf(\"Malloc failed!\\n\");\n  exit(1);\n}\n  if (buffer)\n  {\n    fread (buffer, 1, length, f);\n  }\n  fclose (f);\n}\nreturn buffer;\n}\n\n\nvoid write_file (char * filename, char * data) {\nFILE *f = fopen(filename, \"w\");\nif (f == NULL)\n{\n    printf(\"Error opening file!\");\n    exit(1);\n}\n\nfprintf(f, \"%s\", data);\n\nfclose(f);\n}\n\nchar* getStringArray(int index, char** strs) {\nreturn strs[index];\n}\n\nint start();  //Forwards declare the user's main routine\nchar* caller;\nchar** globalArgs;\nint globalArgsCount;\nbool globalTrace = false;\nbool globalStepTrace = false;\n\nint main( int argc, char *argv[] )  {\n  globalArgs = argv;\n  globalArgsCount = argc;\n  caller=calloc(1024,1);\n\n  return start();\n\n}\n\n")
    (printf "%s" "char * character(int num) { char *string = malloc(2); if (!string) return 0; string[0] = num; string[1] = 0; return string; }") (printf "%s" "void qlog(const char* format, ...) { va_list args; va_start (args, format); vfprintf (stderr, format, args); va_end (args); }")
))

  (void ansiTypeDecl (list l) (declare)
   (body
    (if (> (listLength l) 2)
      (then
       (printIndent 1)
       (printf
        "%s %s %s;\n"
        (stringify (second l))
        (stringify (ansiTypeMap (listLast l)))
        (stringify (first l))))
      (else
       (printIndent 1)
       (printf
        "%s %s;\n"
        (stringify (ansiTypeMap (listLast l)))
        (stringify (car l)))))))

  (void ansiStructComponents (list node) (declare)
   (body
    (if (isEmpty node)
      (then (return))
      (else (ansiTypeDecl (car node)) (ansiStructComponents (cdr node))))))

  (void ansiStruct (list node) (declare)
   (body (ansiStructComponents (cdr (car node))) ))

  (box ansiTypeMap (box aSym) (declare (list symMap nil))
   (body
    (set
     symMap
     (alistCons
      (boxSymbol "stringArray")
      (boxSymbol "char**")
      (alistCons (boxSymbol "string") (boxSymbol "char*") nil)))
    (if (truthy (assoc (stringify aSym) symMap))
      (then (return (cdr (assoc (stringify aSym) symMap))))
      (else (return aSym)))))

  (box ansiFuncMap (box aSym) (declare (list symMap nil))
   (body
    (if (equalString "symbol" (boxType aSym))
      (then
       (set
        symMap
        (alistCons
         (boxSymbol "=")
         (boxSymbol "equal")
         (alistCons
          (boxSymbol "sub-string")
          (boxSymbol "sub_string")
          (alistCons
           (boxSymbol "read-file")
           (boxSymbol "read_file")
           (alistCons
            (boxSymbol "write-file")
            (boxSymbol "write_file")
            (alistCons
             (boxSymbol ">")
             (boxSymbol "greaterthan")
             (alistCons
              (boxSymbol "string-length")
              (boxSymbol "string_length")
              (alistCons (boxSymbol "nil") (boxSymbol "NULL") nil))))))))

       (if (truthy (assoc (stringify aSym) symMap))
         (then (return (cdr (assoc (stringify aSym) symMap))))
         (else (return aSym))))
      (else (return aSym)))))

  (void ansiType (list node) (declare)
   (body
    (if (equalBox (first (cdr node)) (boxString "struct"))
      (then
       (printf "\ntypedef struct %s {\n" (stringify (first (codeof node))))
       (ansiStruct (cdr (cdr node)))
       (printf "\n} %s;\n" (stringify (first  node))))
      (else (printf "typedef ") (ansiTypeDecl (cdr node))))
    ))

  (void ansiTypes (list nodes) (declare)
   (body
    (if (isEmpty nodes)
      (then (return))
      (else (ansiType (car nodes)) (ansiTypes (cdr nodes))))))



	  (void uniqueTarget (string a string b) (declare) (body))


(void ansiCompile (string filename) (declare  (string programStr "") (list tree nil) (list program nil))
    (body
  


   (printf "//Scanning file...%s\n" filename)
    
	(set tree (loadQuon filename))
   (printf "//Building sexpr\n")
    
	(set tree (loadIncludes tree))
	(set tree (macrowalk tree))
  
   (printf "//Building AST\n")
    (set
     program
     (alistCons
      (boxString "includes")
      (astIncludes (first tree))
      (alistCons
       (boxString "types")
       (astTypes (second tree))
       (alistCons (boxString "functions") (astFunctions (third tree)) nil))))


   (printf "//Printing program\n")
    (ansiIncludes (first tree))
    (ansiTypes (second tree))
    (printf "Box* globalStackTrace = NULL;\n")
    (printf
     "\nbool isNil(list p) {\n    return p == NULL;\n}\n\n\n//Forward declarations\n")
    (ansiForwardDeclarations (third tree))
    (printf "\n\n//End forward declarations\n\n")
    (ansiFunctions (third tree))
    (printf "\n")))
  ))
