((includes)
(types)
 (functions

(void luaFunctionArgs (int indent list tree) (declare)
   (body
    (if (isEmpty tree)
      (then (return))
      (else
       (display (second tree))
       (if (isNil (cddr tree)) (then (printf "")) (else (printf ",")))
       (luaFunctionArgs indent (cddr tree))))))


(void luaFunction (int indent list functionDefinition ) (declare)
(body
(printf "\nfunction %s(" (stringify (second functionDefinition)))
(luaFunctionArgs indent (third functionDefinition))
(printf ")\n")
(luaDeclarations (add1 indent) (cdr (fourth functionDefinition)))
(luaBody indent (cdr (fifth functionDefinition)))
(printf "end\n")))

(void luaDeclarations (int indent list declarations ) (declare (list decl nil))
(body
  (if (isNil declarations)
    (then 
      (return))
    (else 
    (set decl (first declarations))
      (printf "local %s =" (stringify (second decl)) )
      (luaExpressionStart indent (third decl))
      (printf "\n")
      (luaDeclarations indent (cdr declarations))
    ))
))



(void luaExpressionStart (int indent list program) (declare)
(body
  (if (isNil program)
    (then 
      (return))
    (else 
      (if (isList program)
      (then
         (if (equalString (stringify (car program)) "get-struct")
         (then
            (printf "%s.%s" (stringify (second program)) (stringify (third program)))
         )
         (else 
            (if (equalString (stringify (car program)) ">")
            (then
               (printf "greaterthan(" )
               (luaExpression indent (cdr program))
               (printf ")")
            )
            (else 
            (if (equalString (stringify (car program)) "=")
            (then
               (printf "equal(" )
               (luaExpression indent (cdr program))
               (printf ")")
            )
            (else 
               (printf "%s(" (stringify (car program)))
               (luaExpression indent (cdr program))
               (printf ")")
            ))
            ))
        ))
      )
      (else
        (luaExpression indent program)
      )
      )
    )
  )
))

(void luaExpression (int indent list program) (declare)
(body
  (if (isNil program)
    (then 
      (return))
    (else 
      (if (isList program)
        (then
          (if (isList (car program))
            (then 
              (luaExpressionStart indent (car program))
            )
            (else
              ;(printf "%s" (stringify (car program)))
              (display (car program))
            )
          )
          (if (greaterthan (listLength program) 1)
          (then 
            (printf ", "))
          (else ))
            (luaExpression indent (cdr program))
        )
        (else
          (display program)
          ))))))


(void luaStatement (int indent list statement) (declare)
  (body
  (if (equalString (stringify (car statement)) "if")
    (then
      ;do if thing
      (printIndent indent)
      (printf "if ")
      (add1 indent)
      (luaExpressionStart (add1 indent) (second statement))
      
      (printf " then\n" )
      (luaBody (add1 indent) (cdr (third statement)))
      (printIndent indent)
      (printf "else\n" )
      (luaBody (add1 indent) (cdr (fourth statement)))
      (printIndent indent)
      (printf "end\n" )
     )
    (else
      (if (equalString (stringify (car statement)) "set")
      (then
         (printIndent indent)
         (printf "%s = " (stringify (second statement)) )
         (luaExpressionStart (add1 indent) (third statement))
      )
      (else
         (if (equalString (stringify (car statement)) "set-struct")
            (then
               (printf "%s.%s = " (stringify (second statement)) (stringify (third statement)))
               (luaExpressionStart indent (fourth statement))
            )
            (else  
            (if (equalString (stringify (car statement)) "return")
               (then
                  (printIndent indent)
                  (printf "return ")
                  (if (greaterthan (listLength statement) 1)
                  (then 
                     (luaExpressionStart indent (second statement)))
                  (else))
                     (printf "\n")
               )
               (else 
                  (printIndent indent)
                  (luaExpressionStart indent statement)
                  (printf ";\n")
            ))
            ))
      ))
    )
  )))

(void luaBody (int indent list program) (declare)
  (body
  (if (isNil program)
    (then (return))
    (else 
      (luaStatement (add1 indent) (car program))
      (printf "\n")
      (luaBody indent  (cdr program))))
))

(void luaFunctions (int indent list program) (declare)
(body
(if (isNil program)
  (then 
    (return))
  (else 
    (luaFunction indent  (car program))
    (luaFunctions indent (cdr program))))
))



(void luaProgram (list program) (declare)
  (body
  (luaIncludes nil)
    (luaFunctions 0 (cdr (third program)))
  )
)

(void luaIncludes (list nodes) (declare)
   (body
    (printf
     "%s" 
     "\nfunction luaDump(o)\n   if type(o) == 'table' then\n      local s = '{ '\n      for k,v in pairs(o) do\n         if type(k) ~= 'number' then k = '\"'..k..'\"' end\n         s = s .. '['..k..'] = ' .. luaDump(v) .. ','\n      end\n      return s .. '} '\n   else\n      return tostring(o)\n   end\nend\nprintf = function(s,...)\nreturn io.write(s:format(...))\nend -- function\n    \nfunction stringConcatenate(a,b)\nreturn a..b\nend\n    \nfunction getStringArray(index, arr)\nreturn arr[index]\nend\n       \nfunction luaWriteFile(name, data)  \nlocal file = io.open(name, \"w\")\nfile:write(data)\nfile:close(file)\nend\n    function luaSubstring(s, start, length)\nreturn string.sub(s, start, start+length)\nend\n    \n    function luaReadFile(file)\n      local f = assert(io.open(file, \"rb\"))\n      local content = f:read(\"*all\")      f:close()\n      return content\n    end\n     \nfunction equalString(a,b)\n        return a==b;\n     end\n    \n     function new()\n        return {};\n     end\n    \n     function isNil(val)\n        return val == nil;\n     end\n    \n     function getEnv(key)\n        return os.getenv(key);\n     end\n    \n    function panic(s)\n      do return end;\n    end\n    \n    function sub(a, b) \n      return a - b; \n    end\n\n    function mult(a, b) \n      return a * b;\n    end\n    \n    function greaterthan(a, b)\n      return a > b;\n    end\n    \n    function subf(a, b) \n      return a - b;\n    end\n    \n    function multf(a, b)\n      return a * b;\n    end\n    \n    function greaterthanf(a, b)\n      return a > b;\n    end\n    \n    function equal(a, b)\n      return a == b;\n    end\n    \n    function andBool(a, b)\n      return a == b;\n    end\n    \n    function string_length(s)\n      return strlen(s);\n    end\n    \n    function setSubString(target, start, source)\n      target[start]=source[0];\n      return target;\n    end\n    \n    function sub_string(s, start, length)\n      substr = calloc(length+1, 1);\n      strncpy(substr, s+start, length);\n      return substr;\n    end\n    \n    function intToString(a)\n      return a\n    end\n\n    function gc_malloc(size)\n      return \"\"\n    end\n    \n    function makeArray(length)\n      return {}\n    end\n    \n    function at(arr, index)\n      return arr[index];\n    end\n    \n    function setAt(array, index, value)\n      array[index] = value;\n    end\n    \n    function read_file(file)\n      local f = io.open(file, \"r\")\n      local content = \"\"\n      local length = 0\n\n      while f:read(0) ~= \"\" do\n          local current = f:read(\"*all\")\n\n          print(#current, length)\n          length = length + #current\n\n          content = content .. current\n      end\n\n      return content\n    end\n    \n    function write_file(filename, data)\n      local file = io.open(filename,'w')\n      file:write(tostring(data))\n      file:close()\n    end\n    \n    caller=\"\";\n    \n    globalArgs={};\n    globalArgsCount=0;\n    globalTrace = false;\n    globalStepTrace = false;\n\n    function main()\n      globalArgs = arg;\n      globalArgsCount = #arg + 1;\n      return start();\n    end\n    \n")
))

(list loadQuon (string filename) (declare (list foundationFuncs nil) (list foundation nil) (string programStr "")  (list tree nil) )
(body
   (set foundation (readSexpr (read-file filename) filename))
   (set foundationFuncs (cdr (third foundation)))

   ;(printf "--[[Scanning file...%s--]]\n" filename)
    (set programStr (read-file filename))
   ;(printf "--[[Building sexpr--]]\n")
    (set tree (readSexpr programStr filename))
	
  (return tree)
))

(list getIncludes (list program) (declare)
  (body
    (return  (cdr (first program)))))

(list getTypes (list program) (declare)
  (body
    (return  (cdr (second program)))))

(list getFunctions (list program) (declare)
  (body
    (return  (cdr (third program)))))


(list loadIncludes (list tree) (declare (list newProg nil) (string includeFile "") (list functionsCombined nil) (list typesCombined nil) (list includeTree nil) (list program nil))
(body

(if ( greaterthan (listLength (getIncludes tree)) 0)
(then

  ;(printf "Includes: ")
  ; (display tree)
  ;(display (getIncludes tree))
  (set includeFile (stringify (first (getIncludes tree))))
  ;(printf "\nLoading %s\n" includeFile)
  (set includeTree (loadQuon includeFile))
  ;(display tree)
  (set functionsCombined (concatLists (getFunctions includeTree) (getFunctions tree)))
  (set typesCombined (concatLists (getTypes includeTree) (getTypes tree)))
  ;(display typesCombined)
  (set newProg (buildProg (cdr (getIncludes tree)) typesCombined functionsCombined)) ;FIXME check includes are recursive
  (return (loadIncludes newProg))
)
(else
  (return tree))
)))

(list buildProg (list includes list types list functions)(declare (list program nil))
(body
(set includes (cons (boxSymbol "includes") includes))
(set types (cons (boxSymbol "types") types))
(set functions (cons (boxSymbol "functions") functions))
  (set program (cons includes
            (cons types
              (cons functions nil))))
  (return program)
)
)

(void luaCompile (string filename) (declare (list tree nil)  )
    (body
  
      (set tree (loadQuon "compiler.qon"))

      ;(printf "Final program: \n")
      (set tree (loadIncludes tree))
      (set tree (macrowalk tree))
      (set tree (macrosingle tree "write-file" "luaWriteFile"))
      (set tree (macrosingle tree "read-file" "luaReadFile"))
      (set tree (macrosingle tree "string-length" "string.len"))
      
      (set tree (macrosingle tree "sub-string" "luaSubstring"))
      (set tree (macrosingle tree "stringLength" "string.len"))
      ;(printf "Transformed tree")
      (luaProgram tree)
      (printf "\n")
      (printf "function main()\nglobalArgs = arg\nglobalArgsCount = #arg\nstart()\nend\n")
      (printf "main()")
   ))
  )
  )
