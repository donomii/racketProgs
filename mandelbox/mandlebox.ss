[module mandlebox scheme
  [provide in-mandlebox?]
  [define c 1]
  [define s 2]
  [define r 0.5]
  [define L 100]
  [define maxcount 5]
  [define [in-mandlebox? x y z new-maxcount new-L]
    [when new-maxcount [set! maxcount new-maxcount]]
    [when new-L [set! L new-L]]
    [in-set x y z]]
  
  ;[define [calc-axis n]
  ;  [+ c [* s [ball-fold r [* f [box-fold n]]]]]]
  [define [boxfold n]
    [if [> n 1]
        [- 2 n]
        [if [< n -1]
            [- -2 n]
            n]]]
  ;[define [ball-fold r n]
  ;[if [< R r]
        
  [define [in-set originalx originaly originalz]
    ;[display [format "Calculating set for ~a,~a,~a~n" originalx originaly originalz]]
    [letrec [
             [count 0]
             [sqr [lambda [n] [expt n 2]]]
             [shrink [lambda [n R] [/ n [* R R]]]] 
             [stage2 [lambda [x y z ]
                       [let [[R [stage1 x y z]]]
                         [if [<=  R r] 
                             [list [shrink x r] [shrink y r] [shrink z r]]
                             [if [<= R 1]
                                 [list [shrink x R] [shrink y R] [shrink z R]]
                                 [list x y z]]]]]]
        
             [stage1 [lambda [x y z]
                       [sqrt [+ [sqr [stage0 x]] [sqr [stage0 y]] [sqr [stage0 z]]]]]]
             [magnitude [lambda [x y z]
                          [sqrt [+ [sqr  x] [sqr  y] [sqr z]]]]]
             [stage0 [lambda [n]
                       [if [> n 1]
                           [- 2 n]
                           [if [< n -1]
                               [- -2 n]
                               n]]]
                
                     ]
    
             [stage3 [lambda [x y z]
              
                       [letrec [[testx [exact->inexact [+ originalx [* x 2]]]]
                                [testy [exact->inexact[+ originaly [* y 2]]]]
                                [testz [exact->inexact[+ originalz [* z 2]]]]
                                [R [magnitude testx testy testz]]
                                ]
                         ;[display [format "Magnittude: ~a~n" R]]
                         [if [> R L]
                             [begin ;[display [format "Escaped at ~a~n" count ]]
                               #f]
                   
                             [if [> count maxcount]
                                 #t
                                 [begin [set! count [add1 count]]
                                        ;[display [format "count: ~a~n" count]]
                                        [apply stage3 [stage2 testx testy testz ]]]
                                 ]]]]]]
      [stage3 [/ originalx 2] [/ originaly 2] [/ originalz 2]]
      ]]
  [define dodot [lambda [x y z]
                  ;[display [format "Calculating set for ~a,~a,~a~n" x y z]]
                  [display [if [in-set x y z]
                               "*" "M"]]]]
  [define [plot n scale]
    [map [lambda [x] 
           [map [lambda [y]
                  [display [if [in-mandlebox? [/ [- x [round [/ n 2]]] scale]  [/ [ - y [round [/ n 2]]] scale] 0] "*" "M"]]]
                                          
                [build-list n values]]
           [newline]]
         [build-list n values]]]
  
  ;[plot 96 8]
  
  ]

